
package interfaz;

import dominio.Ficha;
import dominio.Jugador;
import dominio.Partida;
import dominio.Tablero;
import dominio.Sistema;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.GregorianCalendar;
import javax.swing.*;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.Clip;
import javax.sound.sampled.AudioSystem;

public class Interfaz extends javax.swing.JFrame {
    private static final Color colorJugadorUnoValido = Color.decode("#ff3300");
    private static final Color colorJugadorUnoInvalido = Color.decode("#a66959");
    private static final Color colorJugadorDosValido = Color.decode("#0033cc");
    private static final Color colorJugadorDosInvalido = Color.decode("#475785");
    private static final Color colorMovimientosValidos = Color.decode("#50C878");
   
    JButton[][] botones;
    private int jugadorActivo = 0;
    private Partida partida;
    private Ficha fichaSeleccionada = null;

    public void setPartida(Partida partida){
        this.partida = partida;
    }
    
    public Interfaz() {
        initComponents();
        
        //temporal
        Jugador jugadores[] = new Jugador[2];
        jugadores[0] = new Jugador("juan", "ote", 25);
        jugadores[1] = new Jugador("agustin", "ote2", 25);
        //
        
        botones = new JButton[8][9];
        
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 9; j++) {
                JButton jButton = new JButton();
                
                jButton.addActionListener(new ListenerBoton(i, j));
                panelJuego.add(jButton);
                botones[i][j] = jButton;
                botones[i][j].setForeground(Color.WHITE);
                botones[i][j].setEnabled(false);
                botones[i][j].setFont(new java.awt.Font("Heiti SC", 0, 22));
                botones[i][j].setMargin(new Insets(-5, -5, -5, -5)); 
            }
        }
        
        //actualizar(null);
    }

 public void reproducirSonido(String direccion){
   try {
    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File(direccion));
    Clip clip = AudioSystem.getClip( );
    clip.open(audioInputStream);
    clip.start( );
   }catch(Exception ex){
     System.out.println("Error al reproducir archivo");
   }
 }
 
    void actualizar(ArrayList<Integer> fichasValidas){
        for(int i = 0; i < 8; ++i){
            for(int j = 0; j < 9; ++j){
                botones[i][j].setBackground(Color.GRAY);
                botones[i][j].setText("");
            }
        }
        
        for(int i = 0; i < 2; ++i){
            for(Ficha ficha : partida.getJugadores()[i].getFichas()){
                Color background = pintarFichasDeJugador(i, fichasValidas, ficha.getNumero());
                
                JButton boton = botones[ficha.getY()][ficha.getX()];
                
                boton.setBackground(background);
                boton.setText(ficha.getNumero() + "");
            }
        }
    }
    
    private void limpiarCeldasVerdes(){
        for(int i = 0; i < 8; ++i){
            for(int j = 0; j < 9; ++j){
                if(botones[i][j].getBackground() == colorMovimientosValidos)
                    botones[i][j].setBackground(Color.GRAY);
            }
        }
    }
    
    private Color pintarFichasDeJugador(int numJugador, ArrayList<Integer> fichasValidas, int numFicha){
        if (jugadorActivo == numJugador){
            if(fichasValidas == null)
                return numJugador == 0 ? colorJugadorUnoValido : colorJugadorDosValido;
            else if (fichasValidas.contains(numFicha))
                return numJugador == 0 ? colorJugadorUnoValido : colorJugadorDosValido;
            else
                return numJugador == 0 ?  colorJugadorUnoInvalido : colorJugadorDosInvalido;
        }
        else
            return numJugador == 0 ?  colorJugadorUnoInvalido : colorJugadorDosInvalido;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        panelJuego = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuPartida = new javax.swing.JMenu();
        nuevaPartida = new javax.swing.JMenuItem();
        replicarPartida = new javax.swing.JMenuItem();
        jMenuJugador = new javax.swing.JMenu();
        agregarJugador = new javax.swing.JMenuItem();
        ranking = new javax.swing.JMenuItem();
        ayuda = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 23, 650, 510));
        setPreferredSize(new java.awt.Dimension(650, 510));
        setResizable(false);

        jButton1.setText("Iniciar partida");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        panelJuego.setLayout(new java.awt.GridLayout(8, 9));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(panelJuego, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(67, 67, 67))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(182, 182, 182)
                        .addComponent(jButton1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(panelJuego, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(86, Short.MAX_VALUE))
        );

        jMenuPartida.setText("Partida");

        nuevaPartida.setText("Nueva partida");
        nuevaPartida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevaPartidaActionPerformed(evt);
            }
        });
        jMenuPartida.add(nuevaPartida);

        replicarPartida.setText("Replicar partida");
        jMenuPartida.add(replicarPartida);

        jMenuBar1.add(jMenuPartida);

        jMenuJugador.setText("Jugador");

        agregarJugador.setText("Agregar jugador");
        agregarJugador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarJugadorActionPerformed(evt);
            }
        });
        jMenuJugador.add(agregarJugador);

        ranking.setText("Ranking");
        ranking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rankingActionPerformed(evt);
            }
        });
        jMenuJugador.add(ranking);

        jMenuBar1.add(jMenuJugador);

        ayuda.setText("Ayuda");
        jMenuBar1.add(ayuda);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        /*if(partida != null){
            for(int i = 0; i < botones.length;++i)
                for(int j = 0; j < botones[0].length; ++j)
                    botones[i][j].setEnabled(true);
            
            actualizar(null);
        }*/
    }//GEN-LAST:event_jButton1ActionPerformed

    private void agregarJugadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarJugadorActionPerformed
        AgregarJugador ventana= new AgregarJugador(this);
        this.setEnabled(false);
        ventana.setVisible(true);
        
    }//GEN-LAST:event_agregarJugadorActionPerformed

    private void rankingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rankingActionPerformed
        Ranking ventana= new Ranking(this);
        this.setEnabled(false);
        ventana.setVisible(true);    }//GEN-LAST:event_rankingActionPerformed

    private void nuevaPartidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevaPartidaActionPerformed
        NuevaPartida nuevaPartida=new NuevaPartida(this);
        nuevaPartida.setVisible(true);
        this.setEnabled(false);
    }//GEN-LAST:event_nuevaPartidaActionPerformed

    public static void main(String args[]) {
         Jugador jugador1 = new Jugador("juan", "ote", 25,12);
       Jugador jugador2 = new Jugador("agustin", "ote2", 25,12);
      Sistema.registrarJugador(jugador1);
        Sistema.registrarJugador(jugador2);
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }
    
    private class ListenerBoton implements ActionListener {
        private int x,y;
        public ListenerBoton(int i, int j) {
            x = i;
            y = j;
        }
        
        @Override
        public void actionPerformed(ActionEvent e) {
            clickBoton(x, y);
        }
    }
    
    private void clickBoton(int fila, int columna) {
       //reproducirSonido("Bryant_Myers_diciendo_Bryant_Myers-jm140EP3B7w.wav");
        if(botones[fila][columna].getBackground().equals(colorMovimientosValidos)){
            int mov = columna - fichaSeleccionada.getX();
            
            String movi = "A";
            if(mov == 1)
                movi = "D";
            else if(mov == -1)
                movi = "I";
            
            String movimiento = fichaSeleccionada.getNumero() + "," + movi;
            ArrayList<Integer> fichasValidas = partida.hacerMovimiento(movimiento, jugadorActivo);
            
            if(fichasValidas.isEmpty())
                jugadorActivo = jugadorActivo == 0 ? 1 : 0;
            
            actualizar(fichasValidas.isEmpty() ? null : fichasValidas);
            fichaSeleccionada = null;
        }
        else if (botones[fila][columna].getBackground() != Color.GRAY){
            boolean esJugadorUno = botones[fila][columna].getBackground() == colorJugadorUnoValido;
            boolean esJugadorDos = botones[fila][columna].getBackground() == colorJugadorDosValido;
            
            limpiarCeldasVerdes();
            
            if(!((jugadorActivo == 0 && esJugadorUno) || (jugadorActivo == 1 && esJugadorDos))){
                System.out.println("cual haces");
                return;
            }
            
            ArrayList<Integer> posPos = partida.posicionesPosibles(columna, fila, esJugadorUno);

            for(int i = 0; i < posPos.size(); i+=2)
                botones[posPos.get(i+1)][posPos.get(i)].setBackground(colorMovimientosValidos);

            int f = Integer.parseInt(botones[fila][columna].getText());

            partida.getTablero().mostrar(true);
            
            fichaSeleccionada = new Ficha(columna, fila, f, esJugadorUno);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem agregarJugador;
    private javax.swing.JMenu ayuda;
    private javax.swing.JButton jButton1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuJugador;
    private javax.swing.JMenu jMenuPartida;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JMenuItem nuevaPartida;
    private javax.swing.JPanel panelJuego;
    private javax.swing.JMenuItem ranking;
    private javax.swing.JMenuItem replicarPartida;
    // End of variables declaration//GEN-END:variables
}
